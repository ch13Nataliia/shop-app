import Head from 'next/head';
import Link from 'next/link';
import { dehydrate, QueryClient } from '@tanstack/react-query';
import { fetchProducts } from '@/lib/api-functions/server/products/queries';
import { STORAGE_KEY } from '@/lib/tq/products/settings';
import { Button } from '@/components/mui';
import { UIContext } from '@/components/contexts/UI.context';
import Layout from '@/components/Layout';
import Heading from '@/components/Heading';
import { QueryBoundaries } from '@/components/QueryBoundaries';
import ProductList from '@/components/ProductList';
import { useDelete } from '@/lib/tq/products/mutations';

export default function AdminProductList() {
  const removeMutation = useDelete();

  // const canAdd = checkPermissions(
  //   user,
  //   setting.identifer,
  //   settings.permissions.products.create,
  // );

  // const canUpdate = checkPermissions(
  //   user,
  //   setting.identifer,
  //   settings.permissions.products.update,
  // );

  // const canRemove = checkPermissions(
  //   user,
  //   setting.identifer,
  //   settings.permissions.products.remove,
  // );

  const removeHandler = (id) => {
    removeMutation.mutate(id);
  };
  return (
    <>
      <Head>
        <title>Admin Products List</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Heading component="h2">Products</Heading>
        {canAdd && (
          <Button
            variant="contained"
            component={Link}
            href={`/admin/products/add`}
          >
            Add product
          </Button>
        )}

        <QueryBoundaries>
          <ProductList
            deleteHandler={removeHandler}
            canUpdate={canUpdate}
            canAdd={canAdd}
            canRemove={canRemove}
          />
        </QueryBoundaries>
      </Layout>
    </>
  );
}

export async function getStaticProps(context) {
  const products = await fetchProducts().catch((err) => console.log(err));
  const queryClient = new QueryClient();

  await queryClient.setQueryData(
    [STORAGE_KEY],
    JSON.parse(JSON.stringify(products)),
  );

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}
